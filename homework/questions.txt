Here are homework questions for you to recap the concepts
we went through in class.

1. Navigating the terminal
  a, What is a root directory?
     Root directory is where all files and folders begin.
     
  b, What is the difference between root and home directory?
     The root directory contains all other directories, subdirectories, and files on the system. The home directory contains a particular user's data.

  c, What is the difference between absolute and relative path?
     A relative path describes the location of a file relative to the current directory. An absolute path describes the location from the root directory.

  d, What command do you use to see what directory are you currently in?
     pwd
     
  e, How would you see the files and folders in a directory?
     ls -a

  f, How do you go back to your home directory?
     cd ~
     
  g, How do you create a new folder, can you also specify in the command where you want to save it ?
     mkdir new_folder, we can change the directory with cd command.

  h, How do you remove a folder/directory, is it the same as removing a file?
     rmdir folder, removing file is with rm command.

  i, What is a file or folder is not empty ? What flag would you use to remove it anyway?
     We can use rm -rf command to remove non-empty directories.

  j, How do you move a folder/file ? What arguments does the command take?
     To move files and folders we use the mv command.
     
  k, How can you find out more about a command and see the available options, syntax etc.
    (How/Where do you see the manual/help for a command)
     man ls or man pwd

  l, With what command do you rename a folder/file in the command line?
     mv command to rename a folder/file
     
  m, How do you copy a folder ?
     cp -r first_folder first_folder_copy

  n, What command do you use to open a folder/file ?
     cd folder/file path

2. Creating a new project
  a, How do you create a new folder (what command) ?
     mkdir new_folder

  b, What command do you use to create/initiate a local repository (from the command line)?
     /One can also create a new repository on Github and then just clone it to their machine./
     git init

  c, What command do you use to create a new file ?
     touch new_file

  d, If you create a file and and add text to it, these changes are now on your working directory.
     How would you save these to the local repository (describe the steps with commands)
     
    - from working directory to the staging area
      git add .
      
    - from the staging area to local repository
      git commit
      git commit -m “Add first files” 
      
  e, What does git status do ?
     show modified files in working directory, staged for your next commit

  f, How would you check your commit history?
     git log

  g, To share your project(folder), you will need to create a remote repository.
     This can be done either on Github or in the command line using "gh repo create" command.
     To connect your local repository to the remote one (if you were to create it on github)
     you need to add remote to it. Briefly describe, what would be the commands to do this ?

    - How do you check whether you already have some github/remote repository connected to your local one?
      git remote -v
      
    - What command do you use to add the remote
      git remote add alias URL
    

  h, When local and remote repository are connected, one can push the changes/files so they are visible
     on github. What would be the structrure of the command ? Do you need to create a pull request?
     git push alias branch

3. Working on an existing project
  a, To get this homework to your computer you needed to copy a remote repository into your machine.
    What were the commands you needed to use?
     git clone 
     
  b, Do you need to initiate a git repository after cloning a project?
     No
     
  c, What is the difference between forking and cloning?
     forking means copying
     cloning means downloading
     
  d, Can you just push your changes to repository that you don't "own" on github?
     No
